from django.contrib.auth.tokens import default_token_generator
from django.core.mail import send_mail
from rest_framework import status, viewsets, filters
from rest_framework.decorators import action
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import get_user_model
from users.permissions import AdminOnlyPermission, IsAdminOrReadOnly
from users.serializers import (
    ObtainJWTSerializer, UserMeSerializer, UserSerializer, SignupSerializer
)

User = get_user_model()

# class UserViewSet(viewsets.ModelViewSet):
#     queryset = User.objects.all()
#     serializer_class = UserSerializer
#     permission_classes = (IsAdminOrReadOnly,)
#     http_method_names = ['get', 'post', 'patch', 'delete']
#     lookup_field = 'username'
#     filter_backends = (filters.SearchFilter,)
#     search_fields = ('username',)

#     def get_permissions(self):
#         if self.action in ['me', 'patch_me']:
#             self.permission_classes = [IsAuthenticated]
#         elif self.action in ['create']:
#             self.permission_classes = [AllowAny]
#         else:
#             self.permission_classes = [AdminOnlyPermission]
#         return super().get_permissions()

#     @action(detail=False, methods=['get', 'patch'], permission_classes=[IsAuthenticated], serializer_class=UserMeSerializer)
#     def me(self, request):
#         if request.method == 'GET':
#             user = request.user
#             serializer = self.get_serializer(user)
#             return Response(serializer.data, status=status.HTTP_200_OK)
#         elif request.method == 'PATCH':
#             user = request.user
#             serializer = self.get_serializer(user, data=request.data, partial=True)
#             serializer.is_valid(raise_exception=True)
#             serializer.save()
#             return Response(serializer.data, status=status.HTTP_200_OK)

#     def create(self, request, *args, **kwargs):
#         serializer = SignupSerializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         user = serializer.save()
#         token = default_token_generator.make_token(user)
#         send_mail(
#             'Confirmation code',
#             f'Your confirmation code: {token}',
#             'from@example.com',
#             [user.email],
#             fail_silently=False,
#         )
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     @action(detail=False, methods=['post'], permission_classes=[AllowAny], serializer_class=ObtainJWTSerializer)
#     def obtain_jwt(self, request):
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         user = serializer.validated_data['user']
#         refresh = RefreshToken.for_user(user)
#         return Response({
#             'refresh': str(refresh),
#             'access': str(refresh.access_token),
#         })

#     @action(detail=False, methods=['post'], permission_classes=[AllowAny])
#     def signup(self, request):
#         serializer = SignupSerializer(data=request.data)
#         if serializer.is_valid():
#             user = serializer.save()
#             # Generate confirmation code logic here
#             confirmation_code = "dummy_code"  # Replace with actual logic
#             return Response({'confirmation_code': confirmation_code}, status=status.HTTP_200_OK)
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

#     # def create(self, request, *args, **kwargs):
#     #     if not request.user.is_staff:
#     #         return Response(status=status.HTTP_403_FORBIDDEN)
#     #     return super().create(request, *args, **kwargs)

def send_confirmation_code(email, confirmation_code):
    """Отправляем email сообщение пользователю с его кодом."""
    subject = 'Код подтверждения'
    message = f'Код подтверждения для регистрации: {confirmation_code}'
    from_email = 'api_yamdb@ya.ru'
    recipient_list = [email]
    fail_silently = True
    send_mail(subject, message, from_email, recipient_list, fail_silently)



from django.contrib.auth.tokens import default_token_generator
from django.core.mail import send_mail
from rest_framework import status, viewsets, filters
from rest_framework.decorators import action
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import get_user_model
from users.permissions import AdminOnlyPermission, IsAdminOrReadOnly
from users.serializers import (
    ObtainJWTSerializer, UserMeSerializer, UserSerializer, SignupSerializer
)

User = get_user_model()

class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = (IsAdminOrReadOnly,)
    http_method_names = ['get', 'post', 'patch', 'delete']
    lookup_field = 'username'
    filter_backends = (filters.SearchFilter,)
    search_fields = ('username',)

    def get_permissions(self):
        if self.action in ['me', 'patch_me']:
            self.permission_classes = [IsAuthenticated]
        elif self.action in ['create']:
            self.permission_classes = [AllowAny]
        else:
            self.permission_classes = [AdminOnlyPermission]
        return super().get_permissions()

    @action(detail=False, methods=['get', 'patch'], permission_classes=[IsAuthenticated], serializer_class=UserMeSerializer)
    def me(self, request):
        if request.method == 'GET':
            serializer = self.get_serializer(request.user)
            return Response(serializer.data)
        elif request.method == 'PATCH':
            serializer = self.get_serializer(request.user, data=request.data, partial=True)
            serializer.is_valid(raise_exception=True)
            serializer.save()
            return Response(serializer.data)

    @action(detail=False, methods=['post'], permission_classes=[AllowAny], serializer_class=SignupSerializer)
    def signup(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        token = default_token_generator.make_token(user)
        send_mail(
            'Confirmation code',
            f'Your confirmation code: {token}',
            'from@example.com',
            [user.email],
            fail_silently=False,
        )
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    @action(detail=False, methods=['post'], permission_classes=[AllowAny], serializer_class=ObtainJWTSerializer)
    def obtain_jwt(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        refresh = RefreshToken.for_user(user)
        return Response({
            'refresh': str(refresh),
            'access': str(refresh.access_token),
        })

    def perform_create(self, serializer):
        serializer.save()

    def perform_update(self, serializer):
        serializer.save()

    def perform_destroy(self, instance):
        instance.delete()